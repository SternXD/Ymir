=======================
VDP2 VRAM access cycles
=======================

VRAM access cycles are configured in CYCxn registers (xn=A0/A1/B0/B1) for timings T0-T7 to one of these options:
  0 = [PN0] Pattern name read for NBG0
  1 = [PN1] Pattern name read for NBG1
  2 = [PN2] Pattern name read for NBG2
  3 = [PN3] Pattern name read for NBG3
  4 = [CP0] Character pattern read for NBG0
  5 = [CP1] Character pattern read for NBG1
  6 = [CP2] Character pattern read for NBG2
  7 = [CP3] Character pattern read for NBG3
  8 = (reserved)
  9 = (reserved)
  A = (reserved)
  B = (reserved)
  C = [VC0] Vertical cell scroll table read for NBG0
  D = [VC1] Vertical cell scroll table read for NBG1
  E = [SH2] CPU (SH-2) access
  F = No access (although apparently this also allows SH-2 reads)

All 8 timing slots are available on low resolution modes (TVMD.HRESO2-0 320 or 352 modes).
Timings are restricted to T0-T3 on high resolution modes (TVMD.HRESO2-0 640 or 704 modes).

VRAM banks A and B can be individually partitioned into two (A0/A1 and B0/B1). If not partitioned, the timing parameters
for A0 or B0 are used for the respective banks -- A1/B1 are ignored.

Cycle access patterns must observe some restrictions to ensure the data is made available at the right time for drawing.
Failing to do so usually causes data to be delayed by one cycle, resulting in shifted graphics.


Pattern name accesses
---------------------

For NBG pattern name accesses, certain VRAM bank selections are mutually exclusive and the number of cycles depends on
the NBG's reduction setting specified in ZMCTL.

VRAM banks A0 and B0 are mutually exclusive as well as A1 and B1. That is, you can only assign pattern name cycles for
one NBG to either A0 or B0 and to either A1 or B1. If the bank is not partitioned, A0/B0 is the only valid option for
the respective pair. Examples of legal assignments include A0 only, A0 and B1, A1 and B0, and B1 only. Illegal examples
are A0 and B0 or A1 and B1.

There must be exactly one, two or four cycles assigned across the two selected banks. The number of cycles is determined
by the reduction setting in ZMCTL:
  
  1x   -> 1 cycle
  1/2x -> 2 cycles
  1/4x -> 4 cycles


Character pattern accesses for scroll BGs
-----------------------------------------

For NBG character pattern accesses, the valid options depend on the timing assigned to the NBG's pattern name access and
vary according to the resolution and character pattern size:
  
  Low resolution modes with 1x1 or 2x2 character patterns
  PN slot  Valid timings
     T0    T0 T1 T2 -- T4 T5 T6 T7
     T1    T0 T1 T2 T3 -- T5 T6 T7
     T2    T0 T1 T2 T3 -- -- T6 T7
     T3    T0 T1 T2 T3 -- -- -- T7
     T4    T0 T1 T2 T3 -- -- -- --
     T5    -- T1 T2 T3 -- -- -- --
     T6    -- -- T2 T3 -- -- -- --
     T7    -- -- -- T3 -- -- -- --
  
  High resolution modes with 1x1 character patterns
  PN slot  Valid timings
     T0    T0 T1 T2 --
     T1    -- T1 T2 T3
     T2    T0 -- T2 T3
     T3    T0 T1 -- T3
  
  High resolution modes with 2x2 character patterns
  PN slot  Valid timings
     T0    T0 T1 T2 --
     T1    -- T1 T2 T3
     T2    -- -- T2 T3
     T3    -- -- -- T3

If the NBG requires multiple pattern name access timing slots, the CP access is restricted by the first valid PN access.
(TODO: check 1/2x and 1/4x reductions.)

In high resolution modes the CP access must happen at the same time as or after the PN access, otherwise it is delayed.

Character pattern reads may need more than one CP cycle to fully read the requested data. The base number of access
cycles required is one, and it is increased (multiplied) by the following factors:

  ZMCTL 1/2x reduction -> 2x cycles
  ZMCTL 1/4x reduction -> 4x cycles  (takes priority over 1/2x reduction)

  256-color palette  -> 2x cycles
  2048-color palette -> 4x cycles
  RGB 5:5:5          -> 4x cycles
  RGB 8:8:8          -> 8x cycles

Both the ZMCTL and the color mode factors are applied simultaneously. For example, the total number of CP access cycles
needed for an NBG using 1/2x reduction and a 2048-color palette is 1*2*4 = 8 cycles.

The CP cycles must be spread across different timing slots, otherwise the character pattern data fails to read properly.
Due to this, the total number is cycles is also limited to the number of timing slots available, so combinations like
RGB 8:8:8 with 1/4x reduction are impossible on any mode as the total number of cycles (1*8*4=32) exceeds the available
timing slots (8 for lo-res, 4 for hi-res).

There must be exactly that many access cycles assigned to different timing slots on the same VRAM bank to correctly read
character patterns. It is possible to assign CP accesses to multiple banks. In this case, the required number of access
cycles must be assigned to each bank.


Character pattern accesses for bitmap BGs
-----------------------------------------

Bitmap data is read in chunks of 8 bytes. The same rules for CP access cycle count based on ZMCTL reduction and color
depth applies here.

There is only one special restriction on bitmap accesses for an NBG: if configured across the two VRAM chips, they must
all start on the same timing slot. Bitmap accesses to the same NBG that occur at different timing slots on separate VRAM
chips will result in graphics being shifted left by 8 bytes on the banks that have the later accesses.

For example, if you set up NBG0 as a bitmap image with 256-color palette and no reduction, the total number of cycles
required to fetch the data is 1*2*1 = 2 cycles. Suppose you use a high-resolution mode and set up the following access
cycles (seen in Capcom Generation - Dai-5-shuu Kakutouka-tachi):

   Bank  T0  T1  T2  T3
   A     CP0 CP0
   B             CP0 CP0

The two CP0 reads from VRAM bank A will occur normally, but the CP0 reads from VRAM bank B will be shifted by 8 bytes
because they are out of phase with bank A.

If you set up the following access patterns instead:

   Bank  T0  T1  T2  T3
   A     CP0 CP0 CP0 CP0
   B

then bitmap data can only be read from VRAM bank A and no shifting happens, as the reads from T0 and T1 are sufficient.
The T2 and T3 reads go unused. This acts more like a slot reservation rather than actually reading the data from VRAM.

If you also set up NBG1 with the same parameters as NBG0 and use the following timings (seen in Doukyuusei - if):

   Bank  T0  T1  T2  T3
   A     CP0 CP0
   B             CP1 CP1

then both NBG0 and NBG1 will read exactly one chunk of bitmap data each without interfering with the address, since each
NBG has its own address counter.

An example that uses VRAM bank partitioning and doesn't cause any issues is 3D Baseball (in-game team nameplates):

   Bank  T0  T1  T2  T3
   B0    CP1 CP1
   B1            CP1 CP1

Because the CP1 accesses are all mapped to VRAM chip B, no shifting occurs.

This final example is present on Baroque Report - CD Data File:

   Bank  T0  T1  T2  T3
   A     CP0 CP0 CP0 CP0
   B     CP0 CP0 CP0 CP0

Both reads to VRAM bank A and B start at T0, so no shifting occurs.


Vertical cell scroll accesses
-----------------------------

Vertical cell scroll reads are also subject to timing restrictions. VC reads should occur on slots T0, T1 or T2. Any
other slot results in delayed reads. For NBG0 specifically, if the VC read happens on T2 or later, the first vertical
cell scroll used on the display is repeated twice for tile columns 0 and 1. If VC0 is assigned to T2, the first entry of
the current line's table is displayed twice. If VC0 is assigned to T3 or later, the last entry of the previous line's
table is displayed twice. Subsequent reads occur normally. This duplication does not happen on NBG1.

If both NBG0 and NBG1 vertical cell scroll accesses are used, they must both be assigned to the same VRAM bank and the
NBG0 access must occur before the NBG1 access.

Only one cycle is needed for each vertical cell scroll read. If multiple cycles are assigned, the VDP2 will perform
multiple reads and discard all but the latest value. Vertical cell scroll reads are only performed if the effect is
enabled on the NBG -- if you assign a read cycle for both NBG0 and NBG1 but only enable the effect on NBG1, the access
cycle for NBG0 is ignored.
