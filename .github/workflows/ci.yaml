name: CI build

on:
  push:
    branches:
      - main
  pull_request:

env:
  USERNAME: StrikerX3
  VCPKG_EXE: ${{ github.workspace }}/vcpkg/vcpkg
  FEED_URL: https://nuget.pkg.github.com/StrikerX3/index.json
  VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/StrikerX3/index.json,readwrite"

jobs:
  build-windows:
    name: windows-${{ matrix.arch.name }}
    runs-on: ${{ matrix.arch.runner }}

    strategy:
      fail-fast: false

      matrix:
        arch:
          - name: x64
            runner: windows-2025
            vcpkg_triplet: x64-win-llvm-static-md
          - name: a64
            runner: windows-11-arm
            vcpkg_triplet: arm64-windows

    steps:
      # Set up MASM for lzma
      - uses: glslang/setup-masm@v1
        if: ${{ matrix.arch.name == 'x64' }}

      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Bootstrap vcpkg
        shell: pwsh
        run: ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.bat

      - name: Add NuGet sources to vcpkg
        shell: pwsh
        run: |
          .$(${{ env.VCPKG_EXE }} fetch nuget) `
            sources add `
            -Source "${{ env.FEED_URL }}" `
            -StorePasswordInClearText `
            -Name GitHubPackages `
            -UserName "${{ env.USERNAME }}" `
            -Password "${{ secrets.GITHUB_TOKEN }}"
          .$(${{ env.VCPKG_EXE }} fetch nuget) `
            setapikey "${{ secrets.GITHUB_TOKEN }}" `
            -Source "${{ env.FEED_URL }}"

      - name: Configure CMake
        env:
          CXX: clang++
          CC: clang
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DVCPKG_TARGET_TRIPLET=${{ matrix.arch.vcpkg_triplet }}
          -DCMAKE_CXX_COMPILER=clang++
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_BUILD_TYPE=Debug
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
          -DBUILD_SHARED_LIBS=OFF
          -DYmir_ENABLE_DEVLOG=OFF
          -DYmir_ENABLE_IMGUI_DEMO=OFF
          -DYmir_ENABLE_UPDATE_CHECKS=ON
          -DYmir_ENABLE_SANDBOX=OFF
          -DYmir_ENABLE_YMDASM=ON
          -DYmir_ENABLE_IPO=OFF
          -S ${{ github.workspace }}
          -G Ninja

      - name: Build
        env:
          CXX: clang++
          CC: clang
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --parallel

  build-linux:
    name: linux-${{ matrix.arch.name }}
    runs-on: ${{ matrix.arch.runner }}

    strategy:
      fail-fast: false

      matrix:
        arch:
          - name: x64
            runner: ubuntu-22.04
          - name: a64
            runner: ubuntu-22.04-arm

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install SDL3 Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install build-essential git make pkg-config \
            cmake ninja-build gnome-desktop-testing \
            libasound2-dev libpulse-dev libaudio-dev \
            libjack-dev libsndio-dev libx11-dev \
            libxext-dev libxrandr-dev libxcursor-dev \
            libxfixes-dev libxi-dev libxss-dev \
            libxtst-dev libxkbcommon-dev libdrm-dev \
            libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \
            libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev \
            libudev-dev mono-complete nuget clang-15

      - name: Bootstrap vcpkg
        shell: bash
        run: ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.sh

      - name: Add NuGet sources to vcpkg
        shell: bash
        run: |
          nuget sources add \
            -Source "${{ env.FEED_URL }}" \
            -StorePasswordInClearText \
            -Name GitHubPackages \
            -UserName "${{ env.USERNAME }}" \
            -Password "${{ secrets.GITHUB_TOKEN }}"
          nuget setapikey "${{ secrets.GITHUB_TOKEN }}" \
            -Source "${{ env.FEED_URL }}"

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=clang++-15
          -DCMAKE_C_COMPILER=clang-15
          -DCMAKE_BUILD_TYPE=Debug
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
          -DBUILD_SHARED_LIBS=OFF
          -DYmir_ENABLE_DEVLOG=OFF
          -DYmir_ENABLE_IMGUI_DEMO=OFF
          -DYmir_ENABLE_UPDATE_CHECKS=ON
          -DYmir_ENABLE_SANDBOX=OFF
          -DYmir_ENABLE_YMDASM=ON
          -DYmir_ENABLE_IPO=OFF
          -S ${{ github.workspace }}
          -G Ninja

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --parallel

  build-freebsd:
    name: freebsd-${{ matrix.arch.name }}
    runs-on: ${{ matrix.arch.runner }}

    strategy:
      fail-fast: false

      matrix:
        arch:
          - name: x64
            runner: ubuntu-22.04
          # - name: arm64
          #   runner: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      # TODO: configure vcpkg cache

      - uses: cross-platform-actions/action@v0.29.0
        env:
          CXX: clang++21
          CC: clang21
          PKG_CONFIG_PATH: ${{ github.workspace }}/vcpkg/packages/sdl3_${{ matrix.arch.name }}-freebsd/libdata/pkgconfig
        with:
          operating_system: freebsd
          architecture: ${{ matrix.arch.name }}
          version: '14.3'
          environment_variables: CXX CC PKG_CONFIG_PATH
          run: |
            sudo pkg upgrade -y
            sudo pkg install -y cmake evdev-proto git gmake libX11 libXcursor libXext \
              libXfixes libXi libXrandr libXrender libXScrnSaver libglvnd libinotify \
              llvm21 ninja patchelf pkgconf python3 vulkan-loader zip

            ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.sh

            cmake -B ${{ steps.strings.outputs.build-output-dir }} \
              -DCMAKE_BUILD_TYPE=Debug \
              -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
              -DBUILD_SHARED_LIBS=OFF \
              -DYmir_ENABLE_DEVLOG=OFF \
              -DYmir_ENABLE_IMGUI_DEMO=OFF \
              -DYmir_ENABLE_UPDATE_CHECKS=ON \
              -DYmir_ENABLE_SANDBOX=OFF \
              -DYmir_ENABLE_YMDASM=ON \
              -DYmir_ENABLE_IPO=OFF \
              -S ${{ github.workspace }} \
              -G Ninja

            cmake --build ${{ steps.strings.outputs.build-output-dir }} --parallel

  build-macos:
    name: macos-${{ matrix.arch.name }}
    runs-on: macos-latest

    strategy:
      fail-fast: false

      matrix:
        arch:
          - name: "x64"
            isa_name: "x86_64"
            triplet_arch: "x64"
          - name: "arm64"
            isa_name: "arm64"
            triplet_arch: "arm64"
          # Disabled because vcpkg doesn't support universal binaries
          # See https://github.com/microsoft/vcpkg/discussions/19454
          #- name: "universal"
          #  isa_name: "'x86_64;arm64'"

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install tools
        shell: bash
        run: brew install mono nuget

      - name: Bootstrap vcpkg
        shell: bash
        run: ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.sh

      - name: Add NuGet sources to vcpkg
        shell: bash
        run: |
          nuget sources add \
            -Source "${{ env.FEED_URL }}" \
            -StorePasswordInClearText \
            -Name GitHubPackages \
            -UserName "${{ env.USERNAME }}" \
            -Password "${{ secrets.GITHUB_TOKEN }}"
          nuget setapikey "${{ secrets.GITHUB_TOKEN }}" \
            -Source "${{ env.FEED_URL }}"

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_BUILD_TYPE=Debug
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
          -DBUILD_SHARED_LIBS=OFF
          -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch.isa_name }}
          -DVCPKG_TARGET_TRIPLET=${{ matrix.arch.triplet_arch }}-osx
          -DYmir_ENABLE_DEVLOG=OFF
          -DYmir_ENABLE_IMGUI_DEMO=OFF
          -DYmir_ENABLE_UPDATE_CHECKS=ON
          -DYmir_ENABLE_SANDBOX=OFF
          -DYmir_ENABLE_YMDASM=ON
          -DYmir_ENABLE_IPO=OFF
          -S ${{ github.workspace }}
          -G Ninja

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --parallel
