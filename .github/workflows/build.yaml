name: Shared build

on:
  workflow_call:
    inputs:
      dev-build:
        required: true
        type: boolean
      build-version:
        required: false
        default: ""
        type: string
      prerelease-version:
        required: false
        default: ""
        type: string
  workflow_dispatch: # Enable manual runs
    inputs:
      dev-build:
        required: true
        type: boolean
      build-version:
        required: false
        default: ""
        type: string
      prerelease-version:
        required: false
        default: ""
        type: string

permissions:
  packages: write

env: 
  USERNAME: StrikerX3
  VCPKG_EXE: ${{ github.workspace }}/vcpkg/vcpkg
  FEED_URL: https://nuget.pkg.github.com/StrikerX3/index.json
  VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/StrikerX3/index.json,readwrite"

jobs:
  get-project-version:
    runs-on: ubuntu-latest
    outputs:
      project-version: ${{ steps.project-version.outputs.project-version }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            CMakeLists.txt
          sparse-checkout-cone-mode: false

      - name: Get project version
        id: project-version
        shell: bash
        run: |
          if [ ${{ inputs.dev-build }} = true ]; then
            echo "project-version=v$(sed -nr "s/project\(Ymir\s+VERSION\s+(\S+)\)/\1/p" CMakeLists.txt)-dev-${GITHUB_SHA::8}" >> "$GITHUB_OUTPUT"
          else
            echo "project-version=${GITHUB_REF_NAME//+/_}" >> "$GITHUB_OUTPUT"
          fi

  build-windows:
    name: windows-${{ matrix.c_compiler }}-${{ matrix.architecture.name }}
    runs-on: ${{ matrix.architecture.runner }}
    needs: [get-project-version]

    strategy:
      fail-fast: false

      matrix:
        build_type: [Release]
        # Notes about compilers:
        # - MSVC (cl) produces much slower code and takes a long time to complete the LTO step
        c_compiler: [clang] # [clang, cl]
        architecture:
          - name: "x86_64-SSE2"
            enable_avx2_option: "OFF"
            runner: windows-latest
            target: x64
            vcpkg_triplet: x64-win-llvm-lto-static-md
          - name: "x86_64-AVX2"
            enable_avx2_option: "ON"
            runner: windows-latest
            target: x64
            vcpkg_triplet: x64-win-llvm-lto-static-md
          - name: "ARM64"
            enable_avx2_option: "OFF"
            runner: windows-11-arm
            target: arm64
            vcpkg_triplet: arm64-windows
        include:
          - c_compiler: clang
            cpp_compiler: clang

    steps:
      # Set up MASM for lzma
      - uses: glslang/setup-masm@v1

      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          export BUILD_VERSION=${{ needs.get-project-version.outputs.project-version }}
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "ymir-artifact-name=ymir-windows-${{ matrix.architecture.name }}-${BUILD_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Configure MSVC
        if: ${{ matrix.c_compiler == 'cl' }}
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: ${{ matrix.architecture.target }}

      - name: Bootstrap vcpkg
        shell: pwsh
        run: ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.bat
      
      - name: Add NuGet sources to vcpkg
        shell: pwsh
        run: |
          .$(${{ env.VCPKG_EXE }} fetch nuget) `
            sources add `
            -Source "${{ env.FEED_URL }}" `
            -StorePasswordInClearText `
            -Name GitHubPackages `
            -UserName "${{ env.USERNAME }}" `
            -Password "${{ secrets.GITHUB_TOKEN }}"
          .$(${{ env.VCPKG_EXE }} fetch nuget) `
            setapikey "${{ secrets.GITHUB_TOKEN }}" `
            -Source "${{ env.FEED_URL }}"

      - name: Configure CMake
        env:
          CXX: ${{ matrix.cpp_compiler }}
          CC: ${{ matrix.c_compiler }}
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
          -DVCPKG_TARGET_TRIPLET=${{ matrix.architecture.vcpkg_triplet }}
          -DBUILD_SHARED_LIBS=OFF
          -DYmir_AVX2=${{ matrix.architecture.enable_avx2_option }}
          -DYmir_ENABLE_IPO=ON
          -DYmir_ENABLE_DEVLOG=OFF
          -DYmir_ENABLE_IMGUI_DEMO=OFF
          -DYmir_ENABLE_SANDBOX=OFF
          -DYmir_ENABLE_YMDASM=OFF
          -DYmir_EXTRA_INLINING=ON
          -DYmir_VERSION_PRERELEASE=${{ inputs.prerelease-version }}
          -DYmir_VERSION_BUILD=${{ inputs.build-version }}
          -DYmir_DEV_BUILD=${{ inputs.dev-build && 'ON' || 'OFF' }}
          -S ${{ github.workspace }}
          -G Ninja

      - name: Build
        env:
          CXX: ${{ matrix.cpp_compiler }}
          CC: ${{ matrix.c_compiler }}
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel

      ## FIXME: Catch2 integration still isn't working
      #- name: Test
      #  working-directory: ${{ steps.strings.outputs.build-output-dir }}
      #  run: ctest --build-config ${{ matrix.build_type }}

      - name: Get gamecontrollerdb.txt
        uses: actions/checkout@v4
        with:
          repository: mdqinc/SDL_GameControllerDB
          sparse-checkout: |
            gamecontrollerdb.txt
            LICENSE
          sparse-checkout-cone-mode: false
          path: gcdb

      - name: Package Ymir artifact
        run: |
          $licensesDir = Join-Path (Get-Location) "licenses"
          New-Item -ItemType Directory -Force -Path $licensesDir | Out-Null
          Get-ChildItem -Recurse -Path "${{ steps.strings.outputs.build-output-dir }}\vcpkg_installed" -Filter copyright |
            ForEach-Object {
              $port = Split-Path $_.DirectoryName -Leaf
              $dest = Join-Path $licensesDir "$port-LICENSE.txt"
              Copy-Item $_.FullName $dest -Force
            }

          Copy-Item -Path ".\apps\ymir-sdl3\res\licenses\*"                   -Destination "$licensesDir\"  -Recurse
          Copy-Item -Path ".\vendor\concurrentqueue\LICENSE.md"               -Destination "$licensesDir\concurrentqueue-LICENSE.md"
          Copy-Item -Path ".\vendor\imgui\imgui\LICENSE.txt"                  -Destination "$licensesDir\imgui-LICENSE.txt"
          Copy-Item -Path ".\vendor\libchdr\LICENSE.txt"                      -Destination "$licensesDir\libchdr-LICENSE.txt"
          Copy-Item -Path ".\vendor\libchdr\deps\lzma-24.05\LICENSE"          -Destination "$licensesDir\lzma-LICENSE"
          Copy-Item -Path ".\vendor\libchdr\deps\zlib-1.3.1\LICENSE"          -Destination "$licensesDir\zlib-LICENSE"
          Copy-Item -Path ".\vendor\libchdr\deps\zstd-1.5.6\LICENSE"          -Destination "$licensesDir\zstd-LICENSE"
          Copy-Item -Path ".\vendor\lz4\lz4\lib\LICENSE"                      -Destination "$licensesDir\lz4-LICENSE"
          Copy-Item -Path ".\vendor\mio\LICENSE"                              -Destination "$licensesDir\mio-LICENSE"
          Copy-Item -Path ".\vendor\xxHash\xxHash\LICENSE"                    -Destination "$licensesDir\xxHash-LICENSE"
          Copy-Item -Path ".\LICENSE"                                         -Destination "$licensesDir\Ymir-LICENSE"
          Copy-Item -Path "${{ github.workspace }}\gcdb\LICENSE"              -Destination "$licensesDir\SDL_GameControllerDB-LICENSE"
          Copy-Item -Path "${{ github.workspace }}\gcdb\gamecontrollerdb.txt" -Destination ".\gamecontrollerdb.txt"
          Compress-Archive -Path "README.md","CHANGELOG.md","gamecontrollerdb.txt","$licensesDir/","build/apps/ymir-sdl3/ymir-sdl3.exe" -DestinationPath "${{ steps.strings.outputs.ymir-artifact-name }}.zip"

      - name: Upload Ymir artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.strings.outputs.ymir-artifact-name }}
          path: ${{ steps.strings.outputs.ymir-artifact-name }}.zip

  build-linux:
    name: linux-${{ matrix.c_compiler }}-${{ matrix.architecture.name }}
    runs-on: ${{ matrix.architecture.runner }}
    needs: [get-project-version]

    strategy:
      fail-fast: false

      matrix:
        build_type: [Release]
        # Notes about compilers:
        # - GCC (gcc) gets stuck building sh2.cpp (didn't finish after 12+ hours)
        c_compiler: [clang-15] # [clang, gcc]
        architecture:
          - name: "x86_64-SSE2"
            enable_avx2_option: "OFF"
            runner: ubuntu-22.04
          - name: "x86_64-AVX2"
            enable_avx2_option: "ON"
            runner: ubuntu-22.04
          - name: "AArch64-NEON"
            enable_avx2_option: "OFF" # doesn't matter actually
            runner: ubuntu-22.04-arm
        include:
          - c_compiler: "clang-15"
            cpp_compiler: "clang++-15"

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          export BUILD_VERSION=${{ needs.get-project-version.outputs.project-version }}
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "ymir-artifact-name=ymir-linux-${{ matrix.architecture.name }}-${BUILD_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Install packages and SDL3 dependencies
        run: |
          sudo apt-get update
          sudo apt-get install build-essential git make pkg-config \
            cmake ninja-build gnome-desktop-testing \
            libasound2-dev libpulse-dev libaudio-dev \
            libjack-dev libsndio-dev libx11-dev \
            libxext-dev libxrandr-dev libxcursor-dev \
            libxfixes-dev libxi-dev libxss-dev \
            libxtst-dev libxkbcommon-dev libdrm-dev \
            libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \
            libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev \
            libudev-dev mono-complete nuget clang-15

      - name: Bootstrap vcpkg
        shell: bash
        run: ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.sh

      - name: Add NuGet sources to vcpkg
        shell: bash
        env: 
          VCPKG_EXE: ${{ github.workspace }}/vcpkg/vcpkg
          USERNAME: StrikerX3
          FEED_URL: https://nuget.pkg.github.com/StrikerX3/index.json
        run: |
          nuget sources add \
            -Source "${{ env.FEED_URL }}" \
            -StorePasswordInClearText \
            -Name GitHubPackages \
            -UserName "${{ env.USERNAME }}" \
            -Password "${{ secrets.GITHUB_TOKEN }}"
          nuget setapikey "${{ secrets.GITHUB_TOKEN }}" \
            -Source "${{ env.FEED_URL }}"

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
          -DBUILD_SHARED_LIBS=OFF
          -DYmir_AVX2=${{ matrix.architecture.enable_avx2_option }}
          -DYmir_ENABLE_IPO=ON
          -DYmir_ENABLE_DEVLOG=OFF
          -DYmir_ENABLE_IMGUI_DEMO=OFF
          -DYmir_ENABLE_SANDBOX=OFF
          -DYmir_ENABLE_YMDASM=OFF
          -DYmir_EXTRA_INLINING=ON
          -DYmir_VERSION_PRERELEASE=${{ inputs.prerelease-version }}
          -DYmir_VERSION_BUILD=${{ inputs.build-version }}
          -DYmir_DEV_BUILD=${{ inputs.dev-build && 'ON' || 'OFF' }}
          -S ${{ github.workspace }}
          -G Ninja

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel

      ## FIXME: Catch2 integration still isn't working
      #- name: Test
      #  working-directory: ${{ steps.strings.outputs.build-output-dir }}
      #  run: ctest --build-config ${{ matrix.build_type }}

      - name: Get gamecontrollerdb.txt
        uses: actions/checkout@v4
        with:
          repository: mdqinc/SDL_GameControllerDB
          sparse-checkout: |
            gamecontrollerdb.txt
            LICENSE
          sparse-checkout-cone-mode: false
          path: gcdb

      - name: Package artifacts
        run: |
          mkdir -p licenses
          find "${{ steps.strings.outputs.build-output-dir }}/vcpkg_installed" -type f -path "*/share/*/copyright" | while read -r file; do
            port=$(basename "$(dirname "$file")")
            cp "$file" "licenses/${port}-LICENSE.txt"
          done
          cp -Rf apps/ymir-sdl3/res/licenses/*                    ./licenses/
          cp -f vendor/concurrentqueue/LICENSE.md                 licenses/concurrentqueue-LICENSE.md
          cp -f vendor/imgui/imgui/LICENSE.txt                    licenses/imgui-LICENSE.txt
          cp -f vendor/libchdr/LICENSE.txt                        licenses/libchdr-LICENSE.txt
          cp -f vendor/libchdr/deps/lzma-24.05/LICENSE            licenses/lzma-LICENSE
          cp -f vendor/libchdr/deps/zlib-1.3.1/LICENSE            licenses/zlib-LICENSE
          cp -f vendor/libchdr/deps/zstd-1.5.6/LICENSE            licenses/zstd-LICENSE
          cp -f vendor/lz4/lz4/lib/LICENSE                        licenses/lz4-LICENSE
          cp -f vendor/mio/LICENSE                                licenses/mio-LICENSE
          cp -f vendor/xxHash/xxHash/LICENSE                      licenses/xxHash-LICENSE
          cp -f LICENSE                                           licenses/Ymir-LICENSE
          cp -f ${{ github.workspace }}/gcdb/LICENSE              licenses/SDL_GameControllerDB-LICENSE
          cp -f ${{ github.workspace }}/gcdb/gamecontrollerdb.txt gamecontrollerdb.txt
          tar cJvfh ${{ steps.strings.outputs.ymir-artifact-name }}.tar.xz README.md CHANGELOG.md gamecontrollerdb.txt licenses/ -C build/apps/ymir-sdl3 ymir-sdl3

      - name: Upload Ymir artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.strings.outputs.ymir-artifact-name }}
          path: ${{ steps.strings.outputs.ymir-artifact-name }}.tar.xz

  build-macos:
    name: macos-${{ matrix.arch.name }}
    runs-on: macos-latest
    needs: [get-project-version]

    strategy:
      fail-fast: false

      matrix:
        build_type: [Release]
        arch:
          - name: "x64"
            isa_name: "x86_64"
            triplet_arch: "x64"
            enable_avx2_option: "ON"
          - name: "arm64"
            isa_name: "arm64"
            triplet_arch: "arm64"
            enable_avx2_option: "OFF"
          # Disabled because vcpkg doesn't support universal binaries
          # See https://github.com/microsoft/vcpkg/discussions/19454
          #- name: "universal"
          #  isa_name: "'x86_64;arm64'"

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          export BUILD_VERSION=${{ needs.get-project-version.outputs.project-version }}
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "ymir-artifact-name=ymir-macos-${{ matrix.arch.name }}-${BUILD_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Install tools
        shell: bash
        run: brew install mono nuget

      - name: Bootstrap vcpkg
        shell: bash
        run: ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.sh

      - name: Add NuGet sources to vcpkg
        shell: bash
        env: 
          VCPKG_EXE: ${{ github.workspace }}/vcpkg/vcpkg
          USERNAME: StrikerX3
          FEED_URL: https://nuget.pkg.github.com/StrikerX3/index.json
        run: |
          nuget sources add \
            -Source "${{ env.FEED_URL }}" \
            -StorePasswordInClearText \
            -Name GitHubPackages \
            -UserName "${{ env.USERNAME }}" \
            -Password "${{ secrets.GITHUB_TOKEN }}"
          nuget setapikey "${{ secrets.GITHUB_TOKEN }}" \
            -Source "${{ env.FEED_URL }}"

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
          -DBUILD_SHARED_LIBS=OFF
          -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch.isa_name }}
          -DVCPKG_TARGET_TRIPLET=${{ matrix.arch.triplet_arch }}-osx
          -DYmir_AVX2=${{ matrix.arch.enable_avx2_option }}
          -DYmir_ENABLE_IPO=ON
          -DYmir_ENABLE_DEVLOG=OFF
          -DYmir_ENABLE_IMGUI_DEMO=OFF
          -DYmir_ENABLE_SANDBOX=OFF
          -DYmir_ENABLE_YMDASM=OFF
          -DYmir_EXTRA_INLINING=ON
          -DYmir_VERSION_PRERELEASE=${{ inputs.prerelease-version }}
          -DYmir_VERSION_BUILD=${{ inputs.build-version }}
          -DYmir_DEV_BUILD=${{ inputs.dev-build && 'ON' || 'OFF' }}
          -S ${{ github.workspace }}
          -G Ninja

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --parallel

      ## FIXME: Catch2 integration still isn't working
      #- name: Test
      #  working-directory: ${{ steps.strings.outputs.build-output-dir }}
      #  run: ctest --build-config ${{ matrix.build_type }}

      - name: Get gamecontrollerdb.txt
        uses: actions/checkout@v4
        with:
          repository: mdqinc/SDL_GameControllerDB
          sparse-checkout: |
            gamecontrollerdb.txt
            LICENSE
          sparse-checkout-cone-mode: false
          path: gcdb

      - name: Package artifacts
        run: |
          mkdir licenses
          find "${{ steps.strings.outputs.build-output-dir }}/vcpkg_installed" -type f -path "*/share/*/copyright" | while read -r file; do
            port=$(basename "$(dirname "$file")")
            cp "$file" "licenses/${port}-LICENSE.txt"
          done
          cp -Rf apps/ymir-sdl3/res/licenses/*                    ./licenses/
          cp -f vendor/concurrentqueue/LICENSE.md                 licenses/concurrentqueue-LICENSE.md
          cp -f vendor/imgui/imgui/LICENSE.txt                    licenses/imgui-LICENSE.txt
          cp -f vendor/libchdr/LICENSE.txt                        licenses/libchdr-LICENSE.txt
          cp -f vendor/libchdr/deps/lzma-24.05/LICENSE            licenses/lzma-LICENSE
          cp -f vendor/libchdr/deps/zlib-1.3.1/LICENSE            licenses/zlib-LICENSE
          cp -f vendor/libchdr/deps/zstd-1.5.6/LICENSE            licenses/zstd-LICENSE
          cp -f vendor/lz4/lz4/lib/LICENSE                        licenses/lz4-LICENSE
          cp -f vendor/mio/LICENSE                                licenses/mio-LICENSE
          cp -f vendor/xxHash/xxHash/LICENSE                      licenses/xxHash-LICENSE
          cp -f LICENSE                                           licenses/Ymir-LICENSE
          cp -f ${{ github.workspace }}/gcdb/LICENSE              licenses/SDL_GameControllerDB-LICENSE
          cp -f ${{ github.workspace }}/gcdb/gamecontrollerdb.txt gamecontrollerdb.txt
          zip -r ${{ github.workspace }}/${{ steps.strings.outputs.ymir-artifact-name }}.zip licenses README.md CHANGELOG.md gamecontrollerdb.txt
          cd ${{ github.workspace }}/build/apps/ymir-sdl3/
          zip -r ${{ github.workspace }}/${{ steps.strings.outputs.ymir-artifact-name }}.zip ymir-sdl3.app

      - name: Upload Ymir artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.strings.outputs.ymir-artifact-name }}
          path: ${{ steps.strings.outputs.ymir-artifact-name }}.zip
